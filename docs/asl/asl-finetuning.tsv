prompt	completion
:2over	(Stack Manipulation) Shorthand equivalent to writing: :over,:over
:abs	(Math) Compute a new time series where each interval has the absolute value of the input time series.
:add	Compute a new time series where each interval has the value (a addNaN b) where a and b are the corresponding intervals in the input time series. Use the fadd operator to get strict floating point behavior.
:alpha	(Presentation) Set the alpha value for the colors on the line. The value should be a two digit hex number where 00 is transparent and ff is opague. This setting will be ignored if the color setting is used for the same line.
:and	There are two variants of the :and operator. (Choosing) The first variant is used for choosing the set of time series to operate on. It is a binary operator that matches if both of the sub-queries match. (Math) The second variant computes a new time series where each interval has the value (a AND b) where a and b are the corresponding intervals in the input time series.
:area	(Presentation) Change the line style to be area. In this mode the line will be filled to 0 on the Y-axis.
:as	(Math) Map a tag key name to an alternate name. This can be useful for cases where it is desirable to perform a binary math operation, but the two sides use different tag keys for the same concept. The common IPC metrics are an example where it might be desirable to compare RPS for servers and their clients. The server side RPS would group by nf.app while the client side view would group by ipc.server.app.
:avg	Average or mean aggregation operator. There are two variants of the :avg operator. (Aggregation) The first variant is a helper method that computes the average or mean from one or more time series using the count aggregate to determine how many time series have data at an interval and dividing the sum of the values by the count. This avoids issues where one or time series are missing data at a specific time resulting in an artificially low average. (Math) The second variant computes the average of all the time series from the input expression. This is typically used when there is a need to use some other aggregation for the grouping.
:axis	(Presentation) Specify which Y-axis to use for the line. The value specified is the axis number and should be an integer in the range 0 to 4 inclusive.
:bottomk	(Math) Restrict the output for a grouped expression to the k time series with the smallest value for the specified summary statistic.
:bottomk-others-avg	(Math) Restrict the output for a grouped expression to the k time series with the smallest value for the specified summary statistic and computes an average aggregate for the other time series.
:bottomk-others-max	(Math) Restrict the output for a grouped expression to the k time series with the smallest value for the specified summary statistic and computes a max aggregate for the other time series.
:bottomk-others-min	(Math) Restrict the output for a grouped expression to the k time series with the smallest value for the specified summary statistic and computes a min aggregate for the other time series.
:bottomk-others-sum	(Math) Restrict the output for a grouped expression to the k time series with the smallest value for the specified summary statistic and computes a sum aggregate for the other time series.
:by	Group by operator. There are two variants of the :by operator. (Aggregation) The first variant groups the matching time series by a set of keys and applies an aggregation to matches of the group. (Math) The second variant groups the time series from the input expression by a set of keys and applies an aggregation to matches of the group. The keys used for this grouping must be a subset of keys from the initial group by clause.
:call	(Stack Manipulation) Pops a list off the stack and executes it as a program.
:cf-avg	(Aggregation) Force the consolidation function to be average.
:cf-max	(Aggregation) Force the consolidation function to be max.
:cf-min	(Aggregation) Force the consolidation function to be min.
:cf-sum	(Aggregation) Force the consolidation function to be sum.
:cg	(Math) Recursively add a list of keys to group by expressions. This can be useful for tooling that needs to adjust existing expressions to include keys in the grouping.
:clamp-max	(Math) Restricts the maximum value of the output time series to the specified value. Values from the input time series that are less than or equal to the maximum will not be changed. A common use-case is to allow for auto-scaled axis up to a specified bound.
:clamp-min	(Math) Restricts the minimum value of the output time series to the specified value. Values from the input time series that are greater than or equal to the minimum will not be changed. A common use-case is to allow for auto-scaled axis up to a specified bound.
:clear	(Stack Manipulation) Remove all items from the stack.
:color	(Presentation) Set the color for the line. The value should be one of: hex triplet, 6-digit hex RBG, 8-digit hex ARGB. The first byte is the alpha setting to use with the color. For queries with multiple time series, color palettes are available to automatically assign different colors to the various series. See Color Palettes.
:const	Generates a line where each datapoint is a constant value. Any double value that is left on the stack will get implicitly converted to a constant line, so this operator is typically not used explicitly.
:contains	(Choosing) Select time series where the value for a key includes the specified substring.
:count	Count aggregation operator. There are two variants of the :count operator. (Aggregation) Compute the number of time series that match the query and have a value for a given interval. (Math) Compute the number of time series from the input expression and have a value for a given interval.
:cq	(Math) Recursively AND a common query to all queries in an expression. If the first parameter is not an expression, then it will be not be modified.
:decode	(Presentation) Perform decoding of the legend strings. Generally data going into Atlas is restricted to simple ascii characters that are easy to use as part of a URI. Most commonly the clients will convert unsupported characters to an _. In some cases, it is desirable to be able to reverse that for the purposes of presentation.
:delay	(Math) Delays the values by the window size. This is similar to the :offset operator except that it can be applied to any input line instead of just changing the time window fetched with a DataExpr. Short delays can be useful for alerting to detect changes in slightly shifted trend lines.
:depth	(Stack Manipulation) Push the depth of the stack.
:derivative	(Math) Opposite of :integral. Computes the rate of change per step of the input time series.
:des	(Math) Double exponential smoothing. For most use-cases sliding DES should be used instead to ensure a deterministic prediction.
:des-epic-signal	(Math) Helper for configuring DES in a manner compatible with legacy epic alerts. For more information see the epic macros section of the DES page.
:des-epic-viz	(Presentation) Helper for configuring DES in a manner compatible with legacy Epic alerts. For more information see the epic macros section of the DES page.
:des-fast	(Math) Helper for computing DES using settings to quickly adjust to the input line. See recommended values for more information. For most use-cases the sliding DES variant :sdes-fast should be used instead
:des-simple	(Math) Helper for computing DES using default values. The values used by this operation are prone to wild oscillations. See recommended values for better options.
:des-slow	(Math) Helper for computing DES using settings to slowly adjust to the input line. See recommended values for more information. For most use-cases the sliding DES variant :sdes-slow should be used instead.
:des-slower	(Math) Helper for computing DES using settings to slowly adjust to the input line. See recommended values for more information. For most use-cases the sliding DES variant :sdes-slower should be used instead.
:dist-avg	(Math) Compute the average recorded value for timers and distribution summaries. This is calculated by dividing the total amount recorded by the number of recorded values.
:dist-max	(Math) Compute the maximum recorded value for timers and distribution summaries. This is a helper for aggregating by the max of the max statistic for the meter.
:dist-stddev	(Math) Compute the standard deviation for timers and distribution summaries.
:div	(Math) Compute a new time series where each interval has the value (a / b) where a and b are the corresponding intervals in the input time series. If a and b are 0, then 0 will be returned for the interval. If only b is 0, then NaN will be returned as the value for the interval.
:drop	(Stack Manipulation) Remove the item on the top of the stack.
:dup	(Stack Manipulation) Duplates the item on the top of the stack.
:each	(Stack Manipulation) Pops a list off the stack and executes it as a program.
:ends	(Choosing) Select time series where the value for a key has the specified suffix.
:eq	(Choosing) Select time series that have a specified value for a key.
:eureka-avg	(Math) A helper to compute an average using the number of instances in the UP state based on the discovery.status metric as the denominator. The common infrastructure tags will be used to restrict the scope for the denominator. This operator should be used if the numerator is based on incoming traffic that is routed via the Eureka service and goal is to compute an average per node receiving traffic.
:fadd	(Math) Floating point addition operator. Compute a new time series where each interval has the value (a + b) where a and b are the corresponding intervals in the input time series. Note in many cases NaN will appear in data, e.g., if a node was brought up and started reporting in the middle of the time window for the graph. This can lead to confusing behavior if added to a line that does have data as the result will be NaN. Use the add operator to treat NaN values as zero for combining with other time series.
:false	(Choosing) Query expression that will not match any input time series.
:fcall	(Stack Manipulation) Shorthand equivalent to writing: :get,:call
:fdiv	(Math) Floating point division operator. Compute a new time series where each interval has the value (a / b) where a and b are the corresponding intervals in the input time series. Note in many cases NaN will appear in data, e.g., if a node was brought up and started reporting in the middle of the time window for the graph. Zero divided by zero can also occur due to lack of activity in some windows. Unless you really need strict floating point behavior, use the div operator to get behavior more appropriate for graphs.
:filter	(Presentation) Filters the results of a grouped expression by another expression. The filter expression is a set of signal time series indicating if the corresponding time series from the original expression should be shown.
:fmul	(Math) Compute a new time series where each interval has the value (a * b) where a and b are the corresponding intervals in the input time series.
:format	(Utilities) Format a string using a printf style pattern.
:freeze	(Stack Manipulation) Freeze removes all data from the stack and pushes it to a separate frozen stack that cannot be modified other than to push additional items using the freeze operation. The final stack at the end of the execution will include the frozen contents along with any thing that is on the normal stack. This operation is useful for isolating common parts of the stack while still allowing tooling to manipulate the main stack using concatenative rewrite operations. The most common example of this is the :cq operation used to apply a common query to graph expressions. For a concrete example, suppose you want to have an overlay expression showing network errors on a switch that you want to add in to graphs on a dashboard. The dashboard allows drilling into the graphs by selecting a particular cluster.
:fsub	(Math) Floating point subtraction operator. Compute a new time series where each interval has the value (a - b) where a and b are the corresponding intervals in the input time series. Note in many cases NaN will appear in data, e.g., if a node was brought up and started reporting in the middle of the time window for the graph. This can lead to confusing behavior if added to a line that does have data as the result will be NaN. Use the sub operator to treat NaN values as zero for combining with other time series.
:ge 	Greater than or equal operator. There are two variants of the :ge operator. (Choosing) This first variant is used for choosing the set of time series to operate on. It selects time series that have a value for a key that is greater than or equal to a specified value. (Math) The second variant computes a new time series where each interval has the value (a >= b) where a and b are the corresponding intervals in the input time series.
:get	(Stack Manipulation) Get the value of a variable and push it on the stack.
:gt	Greater than operator. There are two variants of the :gt operator. (Choosing) This first variant is used for choosing the set of time series to operate on. It selects time series that have a value for a key that is greater than a specified value. (Math) Compute a new time series where each interval has the value (a > b) where a and b are the corresponding intervals in the input time series.
:has	(Choosing) Select time series that have a specified key.
:head	(Presentation) Shorthand equivalent to writing: :limit
:in	(Choosing) Select time series where the value for a key is in the specified set.
:integral	(Math) Sum the values across the evaluation context. This is typically used to approximate the distinct number of events that occurred. If the input is non-negative, then each datapoint for the output line will represent the area under the input line from the start of the graph to the time for that datapoint. Missing values, NaN, will be treated as zeroes.
:le	Less than or equal operator. There are two variants of the :le operator. (Choosing) This first variant is used for choosing the set of time series to operate on. It selects time series that have a value for a key that is less than or equal to a specified value. (Math) Compute a new time series where each interval has the value (a <= b) where a and b are the corresponding intervals in the input time series.
:legend	(Presentation) Set the legend text. Legends can contain variables based on the exact keys matched in the query clause and keys used in a group by. Variables start with a $ sign and can optionally be enclosed between parentheses. The parentheses are required for cases where the characters immediately following the name could be a part of the name. If a variable is not defined, then the name of the variable will be used as the substitution value.
:limit	(Presentation) Restrict the output to the first N lines from the input expression. The lines will be chosen in order based on the sort and order used.
:line	(Presentation) Change the line style to be line. This is the default mode and usually does not need to be set explicitly. See the line style examples page for more information
:list	(Stack Manipulation) Pop all items off the stack and push them as a list.
:ls	(Presentation) Set the line style. The value should be one of: line, area, stack, or vspan. See the line style examples page for more information.
:lt	Less than operator. There are two variants of the :lt operator. (Choosing) This first variant is used for choosing the set of time series to operate on. It selects time series that have a value for a key that is less than a specified value. (Math) Compute a new time series where each interval has the value (a < b) where a and b are the corresponding intervals in the input time series.
:lw	(Presentation) The width of the stroke used when drawing the line.
:map	(Stack Manipulation) Create a new list by applying a function to all elements of a list.
:max	Max aggregation operator. There are two variants of the :max operator. (Aggregation) Select the maximum value for corresponding times across all matching time series. (Math) Select the maximum value for corresponding times across the time series resulting from the input expression. This is typically used when there is a need to use some other aggregation for the grouping.
:median	(Math) Shorthand equivalent to writing: (,50,),:percentiles
:min	Min aggregation operator. There are two variants of the :min operator. (Aggregation) Select the minimum value for corresponding times across all matching time series. (Math) Select the minimum value for corresponding times across the time series resulting from the input expression. This is typically used when there is a need to use some other aggregation for the grouping.
:mul	(Math) Compute a new time series where each interval has the value (a * b) where a and b are the corresponding intervals in the input time series. NaNs in a series when other series are present are treated as 1.
:named-rewrite	(Utilities) Internal operation used by some macros to provide a more user friendly display expression. The expanded version will get used for evaluation, but if a new expression is generated from the parsed expression tree it will use the original version along with the named of the macro.
:ndrop	(Stack Manipulation) Remove the top N items on the stack.
:neg	(Math) Compute a new time series where each interval has the negated value of the input time series.
:nip	(Stack Manipulation) Shorthand equivalent to writing: :swap,:drop
:nlist	(Stack Manipulation) Create a list with the top N items on the stack.
:node-avg	(Math) A helper to compute an average using the poller.asg.instance metric as the denominator. The common infrastructure tags will be used to restrict the scope for the denominator. This operator should be used instead of :avg if the goal is to compute an average per node.
:not	(Choosing) Select time series that have a specified key.
:offset	(Math) Shift the time frame to use when fetching the data. This is used to look at a previous interval as a point of reference, e.g., day-over-day or week-over-week. Offset cannot be used with streaming execution of the query, consider using the delay operator for short intervals to detect a change.
:or	There are two variants of the :or operator. (Choosing) The first variant is used for choosing the set of time series to operate on. It is a binary operator that matches if either of the sub-queries match. (Math) The second variant computes a new time series where each interval has the value (a OR b) where a and b are the corresponding intervals in the input time series.
:order	(Presentation) Order to use for sorting results. Supported values are asc and desc for ascending and descending order respectively. Default is asc.
:over	(Stack Manipulation) Copy the item in the second position on the stack to the top.
:palette	(Presentation) Set the palette to use for the results of an expression. This operator is allows for scoping a palette to a particular group by instead of to all lines that share the same axis. A common use-case is to have multiple stacked group by expressions using different palettes. For example, suppose I want to create a graph showing overall request per second hitting my services with successful requests shown in shades of green and errors in shades of red. This can make it easy to visually see if a change is due to an increase in errors:
:pct	(Math) Shorthand equivalent to writing: :dup,:dup,:sum,:div,100,:mul,pct,:named-rewrite The percent contribution of an individual time series to a group.
:per-step	(Math) Converts a line from a rate per second to a rate based on the step size of the graph. This is useful for getting an estimate of the raw number of events for a given interval.
:percentiles	(Math) Estimate percentiles for a timer or distribution summary. The data must have been published appropriately to allow the approximation. If using spectator, then see PercentileTimer and PercentileDistributionSummary helper classes.
:pick	(Stack Manipulation) Pick an item in the stack and put a copy on the top.
:pow	(Math) Compute a new time series where each interval has the value (a power b) where a and b are the corresponding intervals in the input time series.
:random	(Math) Generate a time series that appears to be random noise for the purposes of experimentation and generating sample data. To ensure that the line is deterministic and reproducible it actually is based on a hash of the timestamp. Each datapoint is a value between 0.0 and 1.0.
:rolling-count	(Math) Number of occurrences within a specified window. This operation is frequently used in alerting expressions to reduce noise. A value is counted if it is non-zero. Missing values, NaN, will be treated as zeroes.
:rolling-max	(Math) Maximum value within a specified window. This operation can be used in alerting expressions to find a lower bound for noisy data based on recent samples. Missing values, NaN, will be ignored when computing the min. If all values within the window are NaN, then NaN will be emitted.
:rolling-mean	(Math) Mean of the values within a specified window. The mean will only be emitted if there are at least a minimum number of actual values (not NaN) within the window. Otherwise NaN will be emitted for that time period.
:rolling-min	(Math) Minimum value within a specified window. This operation can be used in alerting expressions to find a lower bound for noisy data based on recent samples. Missing values, NaN, will be ignored when computing the min. If all values within the window are NaN, then NaN will be emitted.
:rolling-sum	(Math) Sum of the values within a specified window.
:re	(Choosing) Select time series where the value for a key matches the specified regular expression. The regular expression value will be automatically anchored at the start and the matching is case sensitive. Always try to have a simple prefix on the expression to allow for more efficient matching of the expression.
:reic	(Choosing) Select time series where the value for a key matches the specified regular expression with case insensitive matching.
:roll	(Stack Manipualtion) Rotate an item in the stack and put it on the top.
:-rot	(Stack Manipulation) Rotate the stack so that the item at the top is now at the bottom.
:rot	(Stack Manipulation) Rotate the stack so that the item at the bottom is now at the top.
:s	(Presentation) Perform a search and replace on the legend strings. This command is similar to the global search and replace (s/regexp/replace/g) operation from tools like vim or sed. The replacement string can use variables to refer to the capture groups of the input expression. The syntax is that same as for legends.
:sdes	(Math) Variant of :des that is deterministic as long as the step size does not change. One of the common complaints with DES is that to get the same value for a given time you must start feeding in data at exactly the same time. So for normal graphs where it is computed using the window of the chart it will have slightly different predictions for a given time. Sliding DES uses two DES functions and alternates between them. One will get trained while the other is getting used, and then the one that was getting used will get reset and the roles swapped.
:sdes-fast	(Math) Helper for computing sliding DES using settings to quickly adjust to the input line. See recommended values for more information.
:sdes-simple	(Math) Shorthand equivalent to writing: :dup,10,0.1,0.5,:sdes,sdes-simple,:named-rewrite
:sdes-slow	(Math) Helper for computing sliding DES using settings to slowly adjust to the input line. See recommended values for more information.
:sdes-slower	(Math) Helper for computing sliding DES using settings to slowly adjust to the input line. See recommended values for more information.
:set	(Stack Manipulation) Set the value of a variable.
:sort	(Presentation) Sort the results of an expression in the legend by one of the summary statistics or by the legend text. The default behavior is to sort by the legend text. This will sort in ascending order by default, for descending order use order.
:sqrt	(Math) Compute a new time series where each interval has the square root of the value from the input time series.
:srandom	(Math) Generate a time series that appears to be random noise for the purposes of experimentation and generating sample data. To ensure that the line is deterministic and reproducible it actually is based on a hash of the timestamp. The seed value is used to vary the values for the purposes of creating multiple different sample lines. Each datapoint is a value between 0.0 and 1.0.
:sset	(Stack Manipulation) Shorthand equivalent to writing: :swap,:set
:stack	(Presentation) Change the line style to be stack. In this mode the line will be filled to the previous stacked line on the same axis. See the line style examples page for more information.
:starts	(Choosing) Select time series where the value for a key has the specified prefix.
:stat	(Math) Create a summary time series showing the value of the specified summary statistic for the data points of the input time series. Valid statistic values are avg, count, max, min, last, and total.
:stat-avg	(Math) Represents the avg,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stat-count	(Math) Represents the count,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stat-last	(Math) Represents the last,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stat-max	(Math) Represents the max,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stat-min 	(Math) Represents the min,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stat-total	(Math) Represents the total,:stat of the input time series when used with the filter operation. The filter operator will automatically fill in the input when used so the user does not need to repeat the input expression for the filtering criteria.
:stddev	(Math) Compute the standard deviation for the results of a group by. If the underlying data is for a timer or distribution summary, then dist-stddev is likely a better choice.
:sub	(Math) Compute a new time series where each interval has the value (a subtractNaN b) where a and b are the corresponding intervals in the input time series. Use the fsub operator to get strict floating point behavior.
:sum	Sum aggregation operator. There are two variants of the :sum operator. (Aggregation) The first variant computes the sum of all the time series that match the query. Sum is the default aggregate used if a query is specified with no explicit aggregate function. (Sum) The second variant computes the sum of all the time series from the input expression. This is typically used when there is a need to use some other aggregation for the grouping.
:swap	(Stack Manipulation) Swap the top two items on the stack.
:time	(Math) Generates a line based on the current time. Supported modes are: secondOfMinute, secondOfDay, minuteOfHour, minuteOfDay, hourOfDay, dayOfWeek, dayOfMonth, dayOfYear, monthOfYear, yearOfCentury, yearOfEra, seconds (since epoch), days (since epoch). The mode can also be a value of the enum ChronoField.
:time-span	(Math) Generates a signal line based on the specified time range. The line will be 1 within the range and 0 for all other times. The format of the start and end times is the same as the start and end time parameters on the Graph API. If the time zone is not explicitly specified, then the value from the tz variable will get used. The default value for the tz variable is the primary time zone used for the graph. The following named times are supported for time spans: gs, ge, s, e, now, epoch.
:topk	(Math) Restrict the output for a grouped expression to the k time series with the largest value for the specified summary statistic.
:topk-others-avg	(Math) Restrict the output for a grouped expression to the k time series with the largest value for the specified summary statistic and computes an average aggregate for the other time series.
:topk-others-max	(Math) Restrict the output for a grouped expression to the k time series with the largest value for the specified summary statistic and computes a max aggregate for the other time series.
:topk-others-min	(Math) Restrict the output for a grouped expression to the k time series with the largest value for the specified summary statistic and computes a min aggregate for the other time series.
:topk-others-sum	(Math) Restrict the output for a grouped expression to the k time series with the largest value for the specified summary statistic and computes a sum aggregate for the other time series.
:true	(Choosing) Query expression that will match any input time series.
:tuck	(Stack Manipulation) Shorthand equivalent to writing: :swap,:over
:vspan	(Presentation) Change the line style to be a vertical span. In this mode any non-zero datapoints on the line will be shown as a span. This is frequently used to visualize when an alert would have fired. See the line style examples page for more information.
